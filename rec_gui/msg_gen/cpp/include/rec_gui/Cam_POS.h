/* Auto-generated by genmsg_cpp for file /home/omid/my_workspace/rec_gui/msg/Cam_POS.msg */
#ifndef REC_GUI_MESSAGE_CAM_POS_H
#define REC_GUI_MESSAGE_CAM_POS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace rec_gui
{
template <class ContainerAllocator>
struct Cam_POS_ {
  typedef Cam_POS_<ContainerAllocator> Type;

  Cam_POS_()
  : status(0)
  , Cam_x(0.0)
  , Cam_y(0.0)
  , Cam_z(0.0)
  , theta(0.0)
  {
  }

  Cam_POS_(const ContainerAllocator& _alloc)
  : status(0)
  , Cam_x(0.0)
  , Cam_y(0.0)
  , Cam_z(0.0)
  , theta(0.0)
  {
  }

  typedef uint8_t _status_type;
  uint8_t status;

  typedef float _Cam_x_type;
  float Cam_x;

  typedef float _Cam_y_type;
  float Cam_y;

  typedef float _Cam_z_type;
  float Cam_z;

  typedef float _theta_type;
  float theta;


  typedef boost::shared_ptr< ::rec_gui::Cam_POS_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rec_gui::Cam_POS_<ContainerAllocator>  const> ConstPtr;
}; // struct Cam_POS
typedef  ::rec_gui::Cam_POS_<std::allocator<void> > Cam_POS;

typedef boost::shared_ptr< ::rec_gui::Cam_POS> Cam_POSPtr;
typedef boost::shared_ptr< ::rec_gui::Cam_POS const> Cam_POSConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::rec_gui::Cam_POS_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::rec_gui::Cam_POS_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace rec_gui

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::rec_gui::Cam_POS_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::rec_gui::Cam_POS_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::rec_gui::Cam_POS_<ContainerAllocator> > {
  static const char* value() 
  {
    return "8eacc8191fac19b5c7149b1f76464ccd";
  }

  static const char* value(const  ::rec_gui::Cam_POS_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x8eacc8191fac19b5ULL;
  static const uint64_t static_value2 = 0xc7149b1f76464ccdULL;
};

template<class ContainerAllocator>
struct DataType< ::rec_gui::Cam_POS_<ContainerAllocator> > {
  static const char* value() 
  {
    return "rec_gui/Cam_POS";
  }

  static const char* value(const  ::rec_gui::Cam_POS_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::rec_gui::Cam_POS_<ContainerAllocator> > {
  static const char* value() 
  {
    return "uint8 status\n\
float32 Cam_x\n\
float32 Cam_y\n\
float32 Cam_z\n\
float32 theta\n\
\n\
\n\
";
  }

  static const char* value(const  ::rec_gui::Cam_POS_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::rec_gui::Cam_POS_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::rec_gui::Cam_POS_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.status);
    stream.next(m.Cam_x);
    stream.next(m.Cam_y);
    stream.next(m.Cam_z);
    stream.next(m.theta);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Cam_POS_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rec_gui::Cam_POS_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::rec_gui::Cam_POS_<ContainerAllocator> & v) 
  {
    s << indent << "status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.status);
    s << indent << "Cam_x: ";
    Printer<float>::stream(s, indent + "  ", v.Cam_x);
    s << indent << "Cam_y: ";
    Printer<float>::stream(s, indent + "  ", v.Cam_y);
    s << indent << "Cam_z: ";
    Printer<float>::stream(s, indent + "  ", v.Cam_z);
    s << indent << "theta: ";
    Printer<float>::stream(s, indent + "  ", v.theta);
  }
};


} // namespace message_operations
} // namespace ros

#endif // REC_GUI_MESSAGE_CAM_POS_H

